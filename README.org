* Overview

  This repository is intended to capture my notes and various bits of software I write to help my Methodist church's Lay
  Leadership committee.

  In a United Methodist church, the Lay Leadership committee is a committee comprised of lay members and led by one of the
  clergy (head pastor?) whose job is to recruit other lay members to serve on all church committees.  It's kind of a
  recruiting/HR/sales activity.

  (A quick note on the license: I understand that, without a license, software really can't be used at all, from a legal
  perspective, without fear of being sued.  Probably not a giant concern for charitable organizations such as churches,
  but, just to be safe, I've picked the most permissive license I see.  Enjoy. :) )

  Diagrams are built with Evolus Pencil.

* Components

** Standalone ExcelConverter

   This is a standalone program that produces a spreadsheet usable for filtering for congregation
   members who might be a good fit for whatever activity is being recruited for (e.g., a committee).

   Explore the ~ExcelConverter~ folder for more info, including its own README.

** "Contact Task Board" Web App

   Most of the rest of this document deals with this.

* Design/implementation process

  Just a quick note to say this should be an iterative process, with lots of changes (big and little) along the way, as
  opposed to a bunch of up-front cogitation and programming followed by delivery of a final product that never changes.

  People who are change-averse will probably not be comfortable, but the end result should (eventually) be better than
  what would be delivered by a "waterfall" process.

* Tables

** Member

   Church member.

   - First Name :: 
   - Last Name ::
   - Phone Number ::
   - Email Address ::
   - Active :: Deceased, moved, etc.
   - Comments :: I guess this should be confidential, if we want to commit this to the cloud.  I think we can trust it,
                 for the most part, but maybe we shouldn't put anything TOO embarrassing in here.

** MemberInterest

   n-to-n link of Members and Interests.

   *NOTE:* AirTable can apparently handle n-to-n relations behind the scenes, so we don't need these explicit relation
   tables.

   - Notes :: Further notes on the particular member's interest, if any.

** MemberContactHistory

   Contact history. n-to-n.  Note that a contact task can have multiple history items ("called, left
   message", "called, spoke to").

   - Member :: Who did the task.  Not necessarily the same as who it was assigned to.
   - ContactTask ::
   - Date :: 
   - Notes ::
   - Result :: Explicit focus on results. :)
   - NextTask :: Don't know if we can automatically create records or not. Use Zapier?

** [MemberCommitteeHistory]

   n-to-n.  Maybe, for the purposes of AirTable, we want the member-history tables combined, so they
   can be presented in one stream.  Bad d/b design, but oh well.  Note that a member can serve
   multiple times on the same committee.

   The idea being that we don't want to overload or fatigue members with committees.

   Note that this data is probably already available in the regular church database.

   - Member ::
   - Committee ::
   - StartDate ::
   - EndDate ::
   - Notes :: Any (confidential) notes on that member's tenure on that committee.

** [Committee]

   May not be necessary.  Church committee.  Can also cover other efforts, like Sunday school
   teacher or "Habitat organizer".

   - Name ::
   - Blurb :: description of committee, for use in recruiting.  Really, the type of standard things we'd like to put in
              blurbs should be separate fields, so we can make sure to get them covered for all committees.
   - MeetingsPerYear :: assumption: 1-2-hour meetings
   - ExtraHoursPerMonth :: time required outside of meetings

** [CommitteeMember?]

   Not sure we need this (almost certain we don't), but it would be n-to-n.  See also MemberCommitteeHistory.

   - StartDate ::
   - EndDate :: 

** ContactTask

   A thing a lay leadership member is tasked with (mostly contacting church members to recruit them).  I assume the
   tasks LL is concerned with are contacts with church members.  Maybe contacts with clergy/committee chairs to get
   questions answered? Do we want to document that? Maybe, so we can get results captured?

   Note: In any system, "Task" turns out to be a hairy, nebulous concept, so we'll need to apply a little discipline
   here when deciding what this system will do.  (In fact, I just renamed this thing from "Task" to "ContactTask", to be
   more clear.)

   - Member :: Church member to contact
   - Assignee :: LayLeadershipCommitteeMember this task is assigned to.
   - ContactTaskType :: An enum so we can get consistent task naming and maybe a description of the
        contact task type (e.g., "Initial Contact", "Followup Contact", "Confirmation Contact").
        Nullable.
   - Summary :: Short display text.  Nullable.  If present, put an "Info"-type icon on the member's
                name in the list to alert the user of its presence.
   - Description :: Notes pertaining to the task as a whole, not its history.  In case a task requires multiple contacts
                    (or steps of some sort? What would those be?), the results of each step would go in the
                    MemberContactHistory notes/result.  Nullable.  If present, member's name will be
                    a hyperlink in the action list that will yield a popup containing this info.

** LayLeadershipCommitteeMember

   Church members who are on the Lay Leadership committee.

   - Member :: Link back to church member, where the contact info will be stored
   - Active ::
   - LastActiveDate :: for "undo" type action ("show all, sort by date, mark active some")

** Interest

   The type of thing a church member might be interested in doing.  Free-form-ish in that we shouldn't be afraid to
   create new ones of these things.

   - Name ::
   - Description :: Do we need this?  In case just the name isn't enough to describe it?  Or should the name really be
                    descriptive enough?

** Tag?

   Just seems like a good idea, rather than "category" (since a thing can really one ever be in one category).
   
   - Name :: e.g., Outreach, Mission, Welcome, Care, Labor, Education, Service

** InterestTag?

   So, interests can be more widely categorized as Mission, Welcome, Service, etc.  So, if members
   express an interest in certain /types/ of things (e.g., "Mission"), we can pull the list of
   possibilities up by Tag.

   - Interest ::
   - Tag :: 
             
** Configuration

*** Animation Speed

    Fast, regular. Super-fast?

*** Statuses

    Sort order, which are terminal.
    
*** Colors

    (Do these really need to be configurable?)
    
* Storyboards

** Initial

   Initial display will be all current members of Lay Leadership committee, all other fields empty.

   To assign a contact task, type the contactee's (member's) name in the "Member to contact" field.

   If there is already a member in that field, a [+] button will appear, allowing a new empty row to
   be inserted.

   *Alternatively*, could have a hamburger menu on each non-empty row.  Operations:

   - New contact
   - Delete contact
   - Reassign contact

** Overall "Undo" function -- Undo/Redo Tree

   If we use the Command (or Memento?) pattern, we can build a tree of undo/redo options.  Put an
   Undo/Redo button at the top of the UI, and when we hit a tree branch node, offer a "display tree"
   option.  (But redo operation will traverse most-recently-used branch.)  Command descriptions
   might be long, so use a tree control to show the tree.  (That might be a gimme.)

** History, Closed

   | *Actor* | *Member to contact* |   |   *Date* |     | *Result*            | *Next Task8                                         | *Notes* |
   | John    | Alice               | > | 7-1-2019 | ... | Left msg            | Call back                                           |         |
   | John    | Bob                 |   | 7-2-2019 | !   | Spoke, Bob accepted | Margaret calls/emails with details of first meeting |         |
   | Mary    | Henry               |   |          | ... |                     | Call                                                |         |

** History, Open

   | *Actor* | *Member to contact* |   |    *Date* |     | *Result*                          | *Next Task8                                         | *Notes* |
   | John    | Alice               | V |  7-1-2019 | ... | Spoke to, she's thinking about it | Call back after 7-3-2019                            |         |
   |         |                     |   |  7-1-2019 |     | Left msg                          | Call back                                           |         |
   |         |                     |   | 6-28-2019 |     | Left msg                          | Call back                                           |         |
   | John    | Bob                 |   |  7-2-2019 | !   | Spoke, Bob accepted               | Margaret calls/emails with details of first meeting |         |
   | Mary    | Henry               |   |           | ... |                                   | Call                                                |         |
   
** Behavior of "Add New Result" button ([+])

   On the far right of the "result" field will appear an "add new" button only when the result
   already has text in it and the status icon isn't "Done" (or otherwise a terminal status).

   Requirements:

   - Result, Next Task, Notes fields blank
   - Status not terminal ("Done").  (Note that status can always be changed to non-terminal.)

   It adds a new blank row, pushing existing rows down one row.

   If there /is/ history, and the result field is blank (or all relevant fields: result, next task,
   notes), then it turns into a "Remove Blank Result" button ([-]) which is basically an Undo
   function: removes the blank result row and shifts all history up one row.

   Or we could just rely on the general "Undo" function.

*** [+] Animation

    Stationary fields:

    - Actor
    - Contactee
    - Status icon (perhaps should be to left of date)

    Fields that drop down a row:

    - Date
    - Result
    - Next action
    - Notes

    Fields drop down and new date (current date, initially) and "Undo" button fades in.

    "Undo" button fades out when anything is changed, and fades back in when operative.

*** [-] Animation

    Oppsite of [+]?

** Filterable fields

   Icon to far right of field header.  Is a toggle that remembers previous filter value.  When
   filtering, tooltip shows current criteria.

   Filter on text will be regex.

   Filter on status will be bitfield (multi checkbox).

   Filter on date will be range.  (TODO: need a "clear current board" operation to start a new year
   of Lay Leadership recruiting.)

   Some individual values will also be filterable by single click (or maybe right click, so don't
   need a plethora of icons).

   - Actor
   - Contactee (easy to see all position this contactee is being recruited for, so can do in one
     phone call)
   - Status (e.g., who's blocked? who's done?)

*** Actor

    Default filter is current user (what's assigned to me?)

*** Member to contact -- no default

*** Date -- no default

*** Status -- no default

** Sortable fields

*** Actor

*** Contactee

*** Status

    Order: Blocked, In Progress, Done.

*** Date

    Each row carries its history, and history is not affected by sort (history is always
    decreasingly sorted (earlier dates at the bottom)).

** New cycle

   Every year, the cycle starts over.  Some data needs to be archived (e.g., contact history).

   [Some committee members roll off.]

* UI Widgets

** Date

   Display: Weds., Mar. 29, 2019.  (dow MMM-d-yyyy, format configurable)

   Accept: mdy format configured, or md "partial date" (month/day or day/month)

   Also accept:

   | . (or blank?) | current date                      |
   | -n            | days ago (-1 is yesterday)        |
   | +n            | days from now (+1 is tomorrow)    |
   | -Wed          | last Weds.                        |
   | +Wed          | next Weds.                        |
   | -Wed x 2      | two Wednesdays ago                |
   | +Wed x 2      | Weds. week (week from next Weds.) |

** Free text w/auto-complete

   Most-frequently used over the last (configurable) period.  If none used, keep doubling period
   until we find at least one.

   Requires tracking... date of use???  Needs a history table???  Maybe a rolling history table
   w/dates and a max. number of rows.
* Server APIs required

 #+BEGIN_SRC sql
   select m.FirstName as llFirstName
          , m.LastName as llLastName
          , 
       from LayLeadershipCommitteeMember llcm
           join Member m on m.MemberId = llcm.MemberId
           left join ContactTask ct on t.Assignee = llcm.MemberId
           left join Member cm on cm.MemberId = ct.MemberId
 #+END_SRC 

* Server

  Something something Java.  Serve on a different port than the wiki?  Different process?

  See [[file:web-app-journal.org][web-app-journal.org]]

* Database

  Something something SQL.

  Sqlite at first.

  Then maybe Postgresql.

  Or some sort of AWS relational d/b.
  
  See [[file:web-app-journal.org][web-app-journal.org]]

